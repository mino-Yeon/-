{
    "id": 10,
    "title": "챕터 4-2(2): 서비스 프로토타이핑",
    "icon": "🔧",
    "questions": [
        {
            "difficulty": "하",
            "time": "1분",
            "question": "본 실습에서 AI Agent의 웹 인터페이스를 구축하기 위해 사용된 주된 라이브러리와 그 목적은 무엇인가요?",
            "options": [
                "LangChain",
                "Gradio",
                "Streamlit",
                "PyMuPDF"
            ],
            "correct": 1,
            "explanation": "⓵ LangChain: LLM 애플리케이션 개발을 위한 프레임워크이지만, 직접적인 웹 UI 구축 라이브러리는 아닙니다.\n⓶ Gradio: Python 함수를 웹 UI로 만들어 공유 가능한 데모를 빠르게 구축하기 위한 라이브러리이며, 본 실습에서 챗봇 UI를 만드는 데 사용되었습니다.\n⓷ Streamlit: 데이터 앱을 만드는 데 사용되는 다른 라이브러리입니다.\n⓸ PyMuPDF: PDF 문서를 로드하는 데 사용되는 라이브러리입니다."
        },
        {
            "difficulty": "상",
            "time": "1분",
            "question": "본 실습에서 Agent 객체의 로딩 시간을 최적화하기 위해 app.py 파일에서 사용된 기법은 무엇이며, 그 이유는 무엇인가요?",
            "options": [
                "비동기 함수 사용",
                "Agent 객체 캐싱",
                "멀티프로세싱",
                "메모리 최적화"
            ],
            "correct": 1,
            "explanation": "⓵ 비동기 함수 사용: UI 응답성을 높이지만, 객체 로딩 자체를 한 번만 하도록 하는 기법은 아닙니다.\n⓶ Agent 객체 캐싱: Agent 인스턴스를 전역 변수에 저장하여 앱 실행 중 한 번만 로드하고 재사용함으로써 로딩 시간을 단축합니다.\n⓷ 멀티프로세싱: 여러 Agent 인스턴스를 병렬로 실행할 때 고려할 수 있지만, 본 실습에서는 캐싱을 사용했습니다.\n⓸ 메모리 최적화: Agent 자체의 메모리 사용량을 줄이는 기법으로, 로딩 시간 최적화와는 직접 관련이 적습니다."
        },
        {
            "difficulty": "하",
            "time": "1분",
            "question": "Agent의 '생각 과정'(Thought, Action, Observation)을 사용자에게 보여주는 것의 가장 중요한 목적은 무엇인가요?",
            "options": [
                "Agent의 실행 속도를 높이기 위해",
                "Agent가 사용하는 데이터의 양을 줄이기 위해",
                "Agent의 추론 과정을 투명하게 공개하여 사용자의 신뢰도를 높이기 위해",
                "Agent가 더 많은 도구를 사용할 수 있도록 유도하기 위해"
            ],
            "correct": 2,
            "explanation": "Agent의 내부 작동 방식을 사용자에게 보여줌으로써, 시스템이 어떻게 답변이나 결정을 내리는지 이해시키고, 이를 통해 사용자가 AI 시스템을 더 신뢰하고 안심하며 사용할 수 있도록 돕는 것이 주된 목적입니다."
        },
        {
            "difficulty": "중",
            "time": "1분",
            "question": "본 프로젝트에서 Agent의 최종 출력이 단순히 텍스트 답변이 아닌 '구조화된 데이터'(JSON)일 경우, 이는 어떤 목적을 시사할 수 있나요?",
            "options": [
                "Agent가 오류를 발생시켰음을 나타낸다.",
                "Agent가 사용자에게 추가 정보를 요청하고 있음을 나타낸다.",
                "Agent가 다른 시스템이나 서비스와의 연동을 위한 명령 또는 정보를 생성했음을 시사할 수 있다",
                "Agent가 학습 데이터를 업데이트했음을 나타낸다."
            ],
            "correct": 2,
            "explanation": "Agent가 최종적으로 JSON과 같은 구조화된 데이터를 출력하는 것은, 단순한 텍스트 응답을 넘어 다른 프로그램이나 시스템이 해당 출력을 파싱하여 특정 액션(예: 주문 처리 시스템에 쿠폰 발급 요청)을 수행하도록 지시하는 용도로 사용될 수 있음을 의미하며, 이는 Multi-agent interaction 또는 Agent와 외부 시스템 간의 연동 시나리오에 활용될 수 있습니다."
        },
        {
            "difficulty": "상",
            "time": "1분",
            "question": "본 실습에서 app.py에서 process_message 함수 내에 yield 키워드가 사용된 주된 이유는 무엇인가요?",
            "options": [
                "Agent의 비동기 호출 결과를 기다리기 위해 사용된다.",
                "Gradio UI에서 사용자의 메시지가 입력되는 즉시 챗봇 창에 표시하고 입력창을 비우는 등, Agent의 최종 응답이 오기 전에 UI를 중간에 업데이트하기 위해 사용된다.",
                "Agent의 실행 시간을 단축시키기 위해 사용된다.",
                "Agent의 중간 생각 과정을 자동으로 JSON 형식으로 변환하기 위해 사용된다."
            ],
            "correct": 1,
            "explanation": "yield 키워드는 Gradio 함수에서 사용될 때, 함수의 실행을 일시 중지하고 현재까지의 결과를 UI로 반환하여 업데이트하게 합니다. process_message 함수에서는 사용자 메시지를 받은 직후 yield를 사용하여 사용자 메시지를 챗봇에 먼저 표시하고 입력창을 비워 사용자에게 즉각적인 피드백을 제공합니다. Agent의 최종 응답이 준비되면 다시 yield를 사용하여 최종 응답과 다른 시각화 컴포넌트들을 업데이트합니다. 이는 Agent의 비동기 호출과는 직접적인 관련이 없으며, UI 업데이트 시점을 제어하는 데 사용됩니다."
        }
    ]
}